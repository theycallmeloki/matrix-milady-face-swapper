- name: Setup Node
  hosts: all
  become: yes
  tasks:
    - name: Update packages
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - build-essential
          - certbot
          - python3-certbot-nginx
        state: present

    - name: Install inotify-tools package
      ansible.builtin.package:
        name: inotify-tools
        state: present

    - name: Define list of Python packages for the sidecar server python app
      set_fact:
        python_packages:
          - quart
          - moment
          - quart_cors
          - python_pachyderm==6.0.0
          - google-api-python-client

    - name: Install Python packages using python3 -m pip
      ansible.builtin.command:
        cmd: python3 -m pip install {{ item }}
      loop: "{{ python_packages }}"

    - name: Create script to start server.py and monitor for changes
      ansible.builtin.copy:
        dest: /usr/local/bin/start_server_py.sh
        mode: 0755
        content: |
          #!/bin/sh
          while true; do
            inotifywait -e modify,move,create,delete {{ ansible_env.HOME }}/interface/server.py
            cd {{ ansible_env.HOME }}/interface && pkill -f "python3 server.py"
            (cd {{ ansible_env.HOME }}/interface && PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python python3 server.py &)
            sleep 2
          done

    - name: Add crontab entry to start server.py on reboot
      ansible.builtin.cron:
        name: "Start server.py on reboot"
        special_time: reboot
        job: "/usr/local/bin/start_server_py.sh"

    - name: Check if server.py is running
      ansible.builtin.shell: pgrep -f "python3 {{ ansible_env.HOME }}/server.py"
      register: server_py_running
      ignore_errors: yes

    - name: Start server.py script immediately
      ansible.builtin.shell: nohup /usr/local/bin/start_server_py.sh > /tmp/start_server_py.log 2>&1 &
      args:
        executable: /bin/bash
      when: server_py_running.rc != 0

    - name: Install Nginx
      apt:
        name: nginx
        state: present

    - name: Ensure Nginx is running and enabled on boot
      systemd:
        name: nginx
        state: started
        enabled: yes

    - name: Define list of domains for main face swapper next app
      set_fact:
        domain_list:
          - domain: 'nutter.tools'
            
    - name: Define list of domains for sidecar server python app
      set_fact:
        api_domain_list:
          - domain: 'api.nutter.tools'
    
    - name: Create Nginx server configuration for each domain in main face swapper next app
      copy:
        content: |
          server {
              listen 80;
              listen [::]:80;

              server_name {{ item.domain }};
              location / {
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header Host $http_host;
                  proxy_set_header X-NginX-Proxy true;

                  proxy_pass http://127.0.0.1:3000;
                  proxy_redirect off;
              }
          }
        dest: /etc/nginx/sites-enabled/{{ item.domain }}
        owner: root
        group: root
        mode: 0644
      with_items: "{{ domain_list }}"

    - name: Create Nginx server configuration for each domain in sidecar server python app
      copy:
        content: |
          server {
              listen 80;
              listen [::]:80;

              server_name {{ item.domain }};
              location / {
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header Host $http_host;
                  proxy_set_header X-NginX-Proxy true;

                  proxy_pass http://127.0.0.1:5000;
                  proxy_redirect off;
              }
          }
        dest: /etc/nginx/sites-enabled/{{ item.domain }}
        owner: root
        group: root
        mode: 0644
      with_items: "{{ api_domain_list }}"

    - name: Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Reload Nginx
      ansible.builtin.systemd:
        name: nginx
        state: reloaded
      become: true
    
    - name: Obtain certificates and reload Nginx
      block:
        - name: Obtain certificates using Certbot with Nginx plugin for multiple domains in main face swapper next app
          ansible.builtin.command:
            cmd: certbot --nginx -d {{ item.domain }} --email {{ letsencrypt_email }} --agree-tos --non-interactive
            creates: /etc/letsencrypt/live/{{ item.domain }}/fullchain.pem
          with_items: "{{ domain_list }}"

        - name: Obtain certificates using Certbot with Nginx plugin for multiple domains in sidecar server python app
          ansible.builtin.command:
            cmd: certbot --nginx -d {{ item.domain }} --email {{ letsencrypt_email }} --agree-tos --non-interactive
            creates: /etc/letsencrypt/live/{{ item.domain }}/fullchain.pem
          with_items: "{{ api_domain_list }}"

        - name: Reload Nginx
          ansible.builtin.systemd:
            name: nginx
            state: reloaded
          become: true